var name = '小王',age=17;
var obj = {
  name: "小张",
  objAge:this.age,
  myFun:function() {
    console.log(this.name '年龄'+this.age)
  }
}
obj.objAge;//17
obj.myFun() //小张年龄 undefined

var fav = "盲僧",
function show() {
  console.log(this.fav);
}
shows() //盲僧
//比较一下这两者this的差别，第一个打印里卖弄的this 指向obj,第二个全局声明 show是() 函数this 是 window
 1、call(),apply() ,bind() 都是用来重定义this这个对象的！
 var name = '小王'，age=17;
 var obj= {
   name:'小张',
   objAge:function(){
     console.log(this.name+'年龄'+this.age)
   }
 }

 var db = {
   name:'德玛',
   age:99
 }
 obj.myFun.call(db); // 德玛年龄 99
 obj.myFun.apply(db); //德玛年龄99
 obj.myFun.bind(db)(); //德玛年龄99
 以上除了bind方法后面多了个（）外，结果返回都一致！
 //由此得出结论，bind返回的是一个新的函数，你必须调用它才会被执行。
 obj.myFun.call(db,'成都','上海');　　　　 // 德玛 年龄 99  来自 成都去往上海
obj.myFun.apply(db,['成都','上海']);      // 德玛 年龄 99  来自 成都去往上海  
obj.myFun.bind(db,'成都','上海')();       // 德玛 年龄 99  来自 成都去往上海
obj.myFun.bind(db,['成都','上海'])();　　 // 德玛 年龄 99  来自 成都, 上海去往 undefined

// 微妙的差距！

// 从上面四个结果不难看出:

// call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：

// call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。

// apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。